방명록 만들기
-------------
1. 어디에 저장을 하지? --- MariaDB
2. 뭘 저장하지?
   
   작성자
   비밀번호
   내용
   작성일
   IP
   
3. 테이블을 만들자 -- DB에서 다음의 작업을 수행하자.
   create table guestbook(
      idx int primary key auto_increment,
      name varchar(30) not null,
      password varchar(50) not null,
      content text not null,
      regDate timestamp default now(),
      ip varchar(20) not null
   );  
       
	desc   guestbook;
	
	-- 샘플로 데이터를 3개만 넣어보자
	insert into	guestbook 
		(name,password,content,ip)
	values
		('주인장', password('1234'), '방명록입니다. 인사말을 남겨주세요','192.168.0.55'),
		('나그네', password('1234'), '방명록이구나. 흔적이라도 남겨야지 하하하','192.168.0.55'),
		('지나는이', password('1234'), '방명록이네 잘보고 갑니다.','192.168.0.55');
		
	select * from guestbook;
	
4. 패키지 3개를 만든다.
   kr.green.guest.vo
   kr.green.guest.dao
   kr.green.guest.service
   
5. kr.green.guest.vo에 클래스 2개를 만들자
=======================================================================================
GuestBookVO.java
---------------------------------------------------------------------------------------
@XmlRootElement  // JAXB : xml로 출력할 수 있도록
@Data
public class GuestBookVO {
	private int    idx;
	private String name;
	private String password;
	private String content;
	private Date   regDate;
	private String ip;
	// 수정(2)/삭제(3)/저장(1)을 구분하는 변수 추가
	private int mode;
}  
=======================================================================================
PagingVO.java   
---------------------------------------------------------------------------------------   
package kr.green.guest.vo;

import java.util.List;

public class PagingVO<T> {
	// 4개는 넘겨받고
	private int currentPage; // 현재페이지
	private int pageSize;    // 한 페이지당 글 수
	private int blockSize;   // 페이지 리스트 개수
	private int totalCount;  // 전체 글의 개수
	// 5개는 계산하고
	private int totalPage;  // 전체 페이지 수
	private int startNo;  	// 시작 글번호
	private int endNo;  	// 끝 글번호
	private int startPage;  // 시작 페이지 번호
	private int endPage;  	// 끝 페이지 번호
	
	// 글이 저장될 리스트
	private List<T> list;

	// 4개는 생성자로 넘겨받자
	public PagingVO(int currentPage, int pageSize, int blockSize, int totalCount) {
		super();
		this.currentPage = currentPage;
		this.pageSize = pageSize;
		this.blockSize = blockSize;
		this.totalCount = totalCount;
		// 나머지 필드는 계산해서 넣자
		calc();
	}

	private void calc() {
		// 넘어온 4가지 값을 검증하자
		if(currentPage<=0) currentPage = 1;
		if(pageSize<2) pageSize = 10;
		if(blockSize<2) blockSize = 10;
		// 전체개수는 DB에서 알아내는 값이므로 검증할 필요가 없다.
		
		// 글이 존재할때만 계산하자
		if(totalCount>0) {
			// 전체 페이지수 = (전체개수-1)/페이지당글수 + 1
			totalPage = (totalCount-1)/pageSize + 1;
			// 현재 페이지가 전체 페이지 수를 넘을 수 없다.
			if(currentPage>totalPage) currentPage = 1;
			// 시작 글번호 0, 10, 20, 30 .....
			// 시작 글번호 = (현재페이지-1)*페이지사이즈
			// 오라클의 경우는 인덱스가 1부터 이므로 +1을 해줘야 한다.
			startNo = (currentPage-1)*pageSize; 
			// 끝 글번호 = 시작번호 + 페이지당글수 - 1
			endNo = startNo + pageSize -1;
			// 끝 글번호가 전체 개수를 넘을수 없다.
			// 오라클의 경우는 >=가 아니고 >이고 -1을 생략해야 한다. -- 인덱스가 1부터이기때문
			if(endNo>=totalCount) endNo = totalCount-1;
			// 시작 페이지 번호 = (현재페이지번호-1)/페이지개수 * 페이지개수 + 1
			startPage = (currentPage-1)/blockSize * blockSize + 1;
			// 끝 페이지 번호 = 시작페이지 번호 + 페이지수 -1;
			endPage = startPage + blockSize -1;
			// 끝 페이지 번호는 전체 페이지 번호를 넘을 수 없다.
			if(endPage>totalPage) endPage = totalPage;
		}
	}

	// Getter & Setter를 만들자!!! - list를 제외한 모든 변수는 밖에서 변경하면 않된다. 즉, Getter만 만들어 주어라
	public List<T> getList() {
		return list;
	}

	public void setList(List<T> list) {
		this.list = list;
	}

	public int getCurrentPage() {
		return currentPage;
	}

	public int getPageSize() {
		return pageSize;
	}

	public int getBlockSize() {
		return blockSize;
	}

	public int getTotalCount() {
		return totalCount;
	}

	public int getTotalPage() {
		return totalPage;
	}

	public int getStartNo() {
		return startNo;
	}

	public int getEndNo() {
		return endNo;
	}

	public int getStartPage() {
		return startPage;
	}

	public int getEndPage() {
		return endPage;
	}

	@Override
	public String toString() {
		return "PagingVO [currentPage=" + currentPage + ", pageSize=" + pageSize + ", blockSize=" + blockSize
				+ ", totalCount=" + totalCount + ", totalPage=" + totalPage + ", startNo=" + startNo + ", endNo="
				+ endNo + ", startPage=" + startPage + ", endPage=" + endPage + ", list=" + list + "]";
	}
	
	// 2개의 메서드를 추가하자!!!
	// 상단에 페이지 정보를 출력하는 메서드
	// 하단에 페이지 이동 번호들을 출력해주는 메서드
	
	// 페이지 상단에 표시할 메서드를 추가하자
		public String getPageInfo() {
			String result =  "전체 : " + totalCount + "개" ;
			if(totalCount>0) result += "(" + currentPage + "/" + totalPage + "Page)";
			return  result; 
		}
		// 페이지 하단에 표시할 메서드를 추가하자!!!
		public String getPageList() {
			StringBuffer sb = new StringBuffer();
			sb.append("<ul class='pagination pagination-sm justify-content-center'>");
			// "이전"은 시작페이지 번호가 1보다 크다면 있다.
			if(startPage>1) {
				sb.append("<li class='page-item'>");
				sb.append("<a class='page-link' href='?p=" +(startPage-1)+ "&s="+pageSize+"&b="+blockSize+"' aria-label='Previous'>");
				sb.append("<span aria-hidden='true'>&laquo;</span>");
				sb.append("</a>");
				sb.append("</li>");
			}
			// 페이지 번호들을 출력해준다.
			for(int i=startPage;i<=endPage;i++) {
				if(i!=currentPage) { // 현재 페이지가 아니면 링크를 걸고
					sb.append("<li class='page-item'><a class='page-link' href='?p=" +(i)+ "&s=" + pageSize + "&b=" + blockSize + "'>" + i + "</a></li>");
				}else { // 현재 페이지는 링크를 걸지 않는다.
					sb.append("<li class='page-item active' aria-current='page'><a class='page-link' href='#'>" + i + "</a></li>");
				}
			}
			// "다음"은 끝 페이지번호가 전체 페이지 번호보다 적다면 있다.
			if(endPage<totalPage) {
				sb.append("<li class='page-item'>");
				sb.append("<a class='page-link' href='?p=" +(endPage+1)+ "&s="+pageSize+"&b="+blockSize+"' aria-label='Previous'>");
				sb.append("<span aria-hidden='true'>&raquo;</span>");
				sb.append("</a>");
				sb.append("</li>");
			}
			sb.append("</ul>");
			return sb.toString();
		}	
}
---------------------------------------------------------------------------------------

6. PagingVO를 테스트 해보자
=======================================================================================
PagingTest.jsp
---------------------------------------------------------------------------------------
<%@page import="kr.green.guest.vo.PagingVO"%>
<%@page import="java.util.ArrayList"%>
<%@page import="java.util.List"%>
<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<%
	int currentPage = 1;
	try{
		currentPage = Integer.parseInt(request.getParameter("p"));
	}catch(Exception e) { ; }

	int pageSize = 10;
	try{
		pageSize = Integer.parseInt(request.getParameter("s"));
	}catch(Exception e) { ; }

	int blockSize = 10;
	try{
		blockSize = Integer.parseInt(request.getParameter("b"));
	}catch(Exception e) { ; }


	List<String> list = new ArrayList<>();
	for(int i=0;i<456;i++){
		list.add("String " + (i+1));
	}

	PagingVO<String> pagingVO = new PagingVO<>(currentPage, pageSize, blockSize, list.size());
	pagingVO.setList(list);
%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
<%-- 부트스트랩을 사용하기 위한 준비 시작 --%>
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.10.2/dist/umd/popper.min.js" ></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.min.js"></script>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
<meta name="viewport" content="width=device-width, initial-scale=1">
<%-- 부트스트랩을 사용하기 위한 준비 끝 --%>
<script type="text/javascript">

</script>
<style type="text/css">

</style>
</head>
<body>
	<%=pagingVO.getPageInfo() %> <br /><hr />
	<%//=pagingVO %>
	<%
		for(int i=pagingVO.getStartNo();i<=pagingVO.getEndNo();i++){
			out.println(list.get(i) + "<br>");
		}
	%>
	<br /><hr />
	<%=pagingVO.getPageList() %>
</body>
</html>
---------------------------------------------------------------------------------------
   
7. Dao클래스를 싱글톤으로 만들자
=======================================================================================
GuestBookDAO.java
---------------------------------------------------------------------------------------
package kr.green.guest.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import kr.green.guest.vo.GuestBookVO;
import kr.green.jdbc.JDBCUtil;

public class GuestBookDAO {
	// --------------------------------------------------------------
	// 싱글톤 패턴으로 만들자
	// 1. 자기 자신의 객체를 정적멤버로 가진다.
	private static GuestBookDAO instance = new GuestBookDAO();

	// 2. 밖에서 객체를 생성하지 못하도록 생성자를 private으로 만든다.
	private GuestBookDAO() {
	}

	// 3. 밖에서 객체를 얻는 메서드를 만든다.
	public static GuestBookDAO getInstance() {
		return instance;
	}
	// --------------------------------------------------------------
	// 1) SQL명령어 1개당 1개의 메서드로 만든다.
	// 2) 트랜젝션을 위해 첫번째 인수는 COnnection으로 넘겨 받는다.
	
	// 1. 개수세기
	public int selectCount(Connection conn) throws SQLException {
		int count = 0;
		// 사용할 SQL명령을 만든다.
		String sql = "select count(*) from guestbook";
		// 명령 객체를 만들어 미완성 SQL명령을 ?를 채워서 완성된 명령으로 만든다. 
		Statement stmt = conn.createStatement();
		// 결과를 얻어온다.
		ResultSet rs = stmt.executeQuery(sql);
		// 얻어온 결과를 리턴타입의 변수에 넣는다.
		if(rs.next()) { // 데이터가 있으면
			count = rs.getInt(1);
		}
		// 사용한 객체를 닫는다.
		JDBCUtil.close(rs);
		JDBCUtil.close(stmt);
		// 결과를 리턴한다.
		return count;
	}
	// 2. 1개 얻기
	public GuestBookVO selectByIdx(Connection conn, int idx) throws SQLException {
		GuestBookVO vo = null;
		// 사용할 SQL명령을 만든다.
		String sql = "select * from guestbook where idx=?";
		// 명령 객체를 만들어 미완성 SQL명령을 ?를 채워서 완성된 명령으로 만든다. 
		PreparedStatement pstmt = conn.prepareStatement(sql);
		pstmt.setInt(1, idx);
		// 결과를 얻어온다.
		ResultSet rs = pstmt.executeQuery();
		// 얻어온 결과를 리턴타입의 변수에 넣는다.
		if(rs.next()) {
			vo = new GuestBookVO();
			// 레코드값을 vo에 채워준다.
			vo.setIdx(rs.getInt("idx"));
			vo.setName(rs.getString("name"));
			vo.setPassword(rs.getString("password"));
			vo.setContent(rs.getString("content"));
			vo.setRegDate(rs.getTimestamp("regDate"));
			vo.setIp(rs.getString("ip"));
		}
		// 사용한 객체를 닫는다.
		JDBCUtil.close(rs);
		JDBCUtil.close(pstmt);
		// 결과를 리턴한다.
		return vo;
	}
	// 3. 1페이지 얻기
	public List<GuestBookVO> selectList(Connection conn, int startNo, int pageSize) throws SQLException {
		// 리턴 타입의 변수를 만든다.
		List<GuestBookVO> list = null;
		// 사용할 SQL명령을 만든다.
		String sql = "select * from guestbook order by idx desc limit ?, ?";
		// 명령 객체를 만들어 미완성 SQL명령을 ?를 채워서 완성된 명령으로 만든다. 
		PreparedStatement pstmt = conn.prepareStatement(sql);
		pstmt.setInt(1, startNo);
		pstmt.setInt(2, pageSize);
		// 결과를 얻어온다.
		ResultSet rs = pstmt.executeQuery();
		// 얻어온 결과를 리턴타입의 변수에 넣는다.
		if(rs.next()) { // 데이터가 있으면
			list = new ArrayList<GuestBookVO>(); // 리턴 타입 객체 선언
			do {
				GuestBookVO vo = new GuestBookVO(); // 레코드 1개당 1개의 글이다.
				// 레코드값을 vo에 채워준다.
				vo.setIdx(rs.getInt("idx"));
				vo.setName(rs.getString("name"));
				vo.setPassword(rs.getString("password"));
				vo.setContent(rs.getString("content"));
				vo.setRegDate(rs.getTimestamp("regDate"));
				vo.setIp(rs.getString("ip"));
				
				list.add(vo); // 리스트에 추가
			}while(rs.next());
		}
		// 사용한 객체를 닫는다.
		JDBCUtil.close(rs);
		JDBCUtil.close(pstmt);
		// 결과를 리턴한다.
		return list;
	}
	// 4. 저장하기
	public int insert(Connection conn, GuestBookVO vo) throws SQLException {
		int count = 0;
		// 사용할 SQL명령을 만든다.
		String sql = "insert into guestbook (name,password,content, regdate, ip) values (?,password(?),?,now(),?)";
		// 명령 객체를 만들어 미완성 SQL명령을 ?를 채워서 완성된 명령으로 만든다. 
		PreparedStatement pstmt = conn.prepareStatement(sql);
		pstmt.setString(1, vo.getName());
		pstmt.setString(2, vo.getPassword());
		pstmt.setString(3, vo.getContent());
		pstmt.setString(4, vo.getIp());
		// 결과를 얻어온다.
		// 얻어온 결과를 리턴타입의 변수에 넣는다.
		count = pstmt.executeUpdate();
		// 사용한 객체를 닫는다.
		JDBCUtil.close(pstmt);
		// 결과를 리턴한다.
		return count;
	}
	// 5. 수정하기
	public int update(Connection conn, GuestBookVO vo) throws SQLException {
		int count = 0;
		// 사용할 SQL명령을 만든다.
		String sql = "update guestbook set content=?, regdate=now(), ip=? where idx=?";
		// 명령 객체를 만들어 미완성 SQL명령을 ?를 채워서 완성된 명령으로 만든다. 
		PreparedStatement pstmt = conn.prepareStatement(sql);
		pstmt.setString(1, vo.getContent());
		pstmt.setString(2, vo.getIp());
		pstmt.setInt(3, vo.getIdx());
		// 결과를 얻어온다.
		// 얻어온 결과를 리턴타입의 변수에 넣는다.
		count = pstmt.executeUpdate();
		// 사용한 객체를 닫는다.
		JDBCUtil.close(pstmt);
		// 결과를 리턴한다.
		return count;
	}
	// 6. 삭제하기
	public int delete(Connection conn, int idx) throws SQLException {
		int count = 0;
		// 사용할 SQL명령을 만든다.
		String sql = "delete from guestbook where idx=?";
		// 명령 객체를 만들어 미완성 SQL명령을 ?를 채워서 완성된 명령으로 만든다. 
		PreparedStatement pstmt = conn.prepareStatement(sql);
		pstmt.setInt(1, idx);
		// 결과를 얻어온다.
		// 얻어온 결과를 리턴타입의 변수에 넣는다.
		count = pstmt.executeUpdate();
		// 사용한 객체를 닫는다.
		JDBCUtil.close(pstmt);
		// 결과를 리턴한다.
		return count;
	}
	// 7. 비번의 일치 여부를 알아내는 메서드
	public int passwordCheck(Connection conn, int idx, String password) throws SQLException {
		int count = 0;
		// 사용할 SQL명령을 만든다.
		String sql = "select count(*) from guestbook where idx=? and password = password(?)";
		// 명령 객체를 만들어 미완성 SQL명령을 ?를 채워서 완성된 명령으로 만든다. 
		PreparedStatement pstmt = conn.prepareStatement(sql);
		pstmt.setInt(1, idx);
		pstmt.setString(2, password);
		// 결과를 얻어온다.
		// 얻어온 결과를 리턴타입의 변수에 넣는다.
		ResultSet rs = pstmt.executeQuery();
		rs.next();
		count = rs.getInt(1);
		// 사용한 객체를 닫는다.
		JDBCUtil.close(rs);
		JDBCUtil.close(pstmt);
		// 결과를 리턴한다.
		return count;
	}
	
}
  
---------------------------------------------------------------------------------------
8. Service클래스를 싱글톤으로 만들자
=======================================================================================
GuestBookService.java
---------------------------------------------------------------------------------------
package kr.green.guest.service;

import java.sql.Connection;
import java.util.List;

import kr.green.guest.dao.GuestBookDAO;
import kr.green.guest.vo.GuestBookVO;
import kr.green.guest.vo.PagingVO;
import kr.green.jdbc.JDBCUtil;
import lombok.extern.log4j.Log4j2;

@Log4j2
public class GuestBookService {
	// --------------------------------------------------------------
	// 싱글톤 패턴으로 만들자
	// 1. 자기 자신의 객체를 정적멤버로 가진다.
	private static GuestBookService instance = new GuestBookService();

	// 2. 밖에서 객체를 생성하지 못하도록 생성자를 private으로 만든다.
	private GuestBookService() {
	}

	// 3. 밖에서 객체를 얻는 메서드를 만든다.
	public static GuestBookService getInstance() {
		return instance;
	}
	// --------------------------------------------------------------
	// 로직 1개당 1개의 메서드
	// 1. 목록보기 -- 1페이지 분량의 글을 가져온다.
	public PagingVO<GuestBookVO> selectList(int currentPage, int pageSize, int blockSize){
		log.debug("selectList 호출 : " + currentPage + ", " + pageSize + ", " + blockSize);
		PagingVO<GuestBookVO> pagingVO = null;
		Connection conn = null;
		GuestBookDAO dao = null;
		try {
			conn = JDBCUtil.getConnection();
			conn.setAutoCommit(false);
			dao = GuestBookDAO.getInstance();
			// ----------------------------------------------------
			// 이 부분만 변경 된다
			int totalCount = dao.selectCount(conn); // 전체개수 구하기
			pagingVO = new PagingVO<GuestBookVO>(currentPage, pageSize, blockSize, totalCount); // 페이지 계산 완료
			// 1페이지 분량의 글을 가져온다.
			if(totalCount>0) {
				List<GuestBookVO> list = dao.selectList(conn, pagingVO.getStartNo(), pagingVO.getPageSize());
				// 가져온 리스트를 pagingVO에 넣는다.
				pagingVO.setList(list);
			}
			// ----------------------------------------------------
			conn.commit();
		}catch (Exception e) {
			JDBCUtil.rollback(conn);
			e.printStackTrace();
		}finally {
			JDBCUtil.close(conn);
		}
		log.debug("selectList 리턴 : " + pagingVO);
		return pagingVO;
	}
	// 2. 1개 얻기 -- 수정/삭제할때 보여줘야 한다.
	public GuestBookVO selectByIdx(int idx) {
		GuestBookVO vo = null;
		Connection conn = null;
		GuestBookDAO dao = null;
		try {
			conn = JDBCUtil.getConnection();
			conn.setAutoCommit(false);
			dao = GuestBookDAO.getInstance();
			// ----------------------------------------------------
			// 이 부분만 변경 된다
			vo = dao.selectByIdx(conn, idx);
			// ----------------------------------------------------
			conn.commit();
		}catch (Exception e) {
			JDBCUtil.rollback(conn);
			e.printStackTrace();
		}finally {
			JDBCUtil.close(conn);
		}
		
		return vo;
	}
	// 3. 저장하기
	public int insert(GuestBookVO vo) {
		log.debug("insert 호출 : " + vo);
		int count = 0;
		Connection conn = null;
		GuestBookDAO dao = null;
		try {
			conn = JDBCUtil.getConnection();
			conn.setAutoCommit(false);
			dao = GuestBookDAO.getInstance();
			// ----------------------------------------------------
			// 이 부분만 변경 된다
			if(vo!=null) { // 넘어온 데이터가 있다면
				if(vo.getName()!=null && vo.getName().trim().length()>0) { // 이름이 있다면
					if(vo.getPassword()!=null && vo.getPassword().trim().length()>0) { // 비번이 있다면
						if(vo.getContent()!=null && vo.getContent().trim().length()>0) { // 내용이 있다면
							count = dao.insert(conn, vo);
						}
					}
				}
			}
			// ----------------------------------------------------
			conn.commit();
		}catch (Exception e) {
			JDBCUtil.rollback(conn);
			e.printStackTrace();
		}finally {
			JDBCUtil.close(conn);
		}
		log.debug("insert 리턴 : " + count);
		return count;
	}
	// 4. 수정하기
	public int update(GuestBookVO vo) {
		int count = 0;
		Connection conn = null;
		GuestBookDAO dao = null;
		try {
			conn = JDBCUtil.getConnection();
			conn.setAutoCommit(false);
			dao = GuestBookDAO.getInstance();
			// ---------------------------------------------------------
			// 이 부분만 변경 된다
			// 넘어온 데이터가 있으면서 DB에 저장된 비번이 일치하면 수정
			if(vo!=null) { // 넘어온 데이터가 있으면서
				if(dao.passwordCheck(conn, vo.getIdx(), vo.getPassword())==1) { // 비번이 일치하면
					dao.update(conn, vo);
				}
			}
			// ---------------------------------------------------------
			conn.commit();
		}catch (Exception e) {
			JDBCUtil.rollback(conn);
			e.printStackTrace();
		}finally {
			JDBCUtil.close(conn);
		}
		return count;
	}
	// 5. 삭제하기
	public int delete(GuestBookVO vo) {
		int count = 0;
		Connection conn = null;
		GuestBookDAO dao = null;
		try {
			conn = JDBCUtil.getConnection();
			conn.setAutoCommit(false);
			dao = GuestBookDAO.getInstance();
			// ----------------------------------------------------
			// 이 부분만 변경 된다
			// 넘어온 데이터가 있으면서 DB에 저장된 비번이 일치하면 삭제
			if(vo!=null) { // 넘어온 데이터가 있으면서
				if(dao.passwordCheck(conn, vo.getIdx(), vo.getPassword())==1) { // 비번이 일치하면
					dao.delete(conn, vo.getIdx());
				}
			}
			// ----------------------------------------------------
			conn.commit();
		}catch (Exception e) {
			JDBCUtil.rollback(conn);
			e.printStackTrace();
		}finally {
			JDBCUtil.close(conn);
		}
		return count;
	}
}


---------------------------------------------------------------------------------------

9. 모든 페이지 상단에 공통으로 들어가는 코드는 별도로 만들어서 포함하면 편리하다.
=======================================================================================
include.jsp
---------------------------------------------------------------------------------------
<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<%
// 모든 페이지 상단에 공통으로 들어가는 코드는 별도로 만들어서 포함하면 편리하다.
request.setCharacterEncoding("UTF-8");
// 페이지번호 받기/페이지 사이즈 받기/블록사이즈 받기/글번호 받기/모드(저장/수정/삭제 구분) 받기
// 페이지번호 받기
int currentPage = 1;
try{
	currentPage = Integer.parseInt(request.getParameter("p"));
}catch(Exception e) { ; }
// 페이지 사이즈 받기 
int pageSize = 5;
try{
	pageSize = Integer.parseInt(request.getParameter("s"));
}catch(Exception e) { ; }
// 블록사이즈 받기
int blockSize = 5;
try{
	blockSize = Integer.parseInt(request.getParameter("b"));
}catch(Exception e) { ; }
// 글번호 받기
int idx = 0;
try{
	idx = Integer.parseInt(request.getParameter("idx"));
}catch(Exception e) { ; }
// 모드(저장(1)/수정(2)/삭제(3) 구분) 받기
int mode = 0;
try{
	mode = Integer.parseInt(request.getParameter("m"));
}catch(Exception e) { ; }

%>
---------------------------------------------------------------------------------------

10. 목록 보기를 만들자.
=======================================================================================
index.jsp
---------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------
	
11. 저장하기 폼을 만들자.
=======================================================================================
insert.jsp
---------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------
	
12. 저장/수정/삭제 처리를 한번에 하는 파일을 만들자
=======================================================================================
updateOk.jsp
---------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------
	
13. 수정하기 폼을 만들자.
=======================================================================================
update.jsp
---------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------
	
14. 삭제하기 폼을 만들자.
=======================================================================================
update.jsp
---------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------
	
   